<!DOCTYPE html>
<!-- saved from url=(0036)http://code.bocoup.com/html5logo-3d/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <title>Spinning HTML5Logo</title>
  <style>
   /*
    * Spinning HTML5Logo Demo
    * by @boazsender: http://boazsender.com
    * Thanks to http://webkit.org/blog/386/3d-transforms/
    *
    */ 

    @-webkit-keyframes spinanimation {
      0% {
        -webkit-transform: rotateY(0);
      }
      100% {
        -webkit-transform: rotateY(360deg);
      }
    }

    body {
      -webkit-perspective: 800; 
      -webkit-perspective-origin: 50% 30%;
      overflow: hidden;
    }
    
    .container {
      -webkit-transform-style: preserve-3d;
      -webkit-animation: spinanimation 10s infinite linear;
      position: relative;
      top: 160px;
      margin: 0 auto;
      width: 200px;
    }
    
    img {
      -webkit-backface-visibility: visible;
      position: absolute;
      height: 200px;
      -webkit-transition: all .4s;
    }

    img:hover{
      -webkit-transform: translateZ(0px);
    }

    .a { -webkit-transform: }
    .b { -webkit-transform: rotateY(0deg)   translateZ(320px); }
    .c { -webkit-transform: rotateY(45deg)  translateZ(320px); }
    .d { -webkit-transform: rotateY(90deg)  translateZ(320px); }
    .e { -webkit-transform: rotateY(135deg) translateZ(320px); }
    .f { -webkit-transform: rotateY(180deg) translateZ(320px); }
    .g { -webkit-transform: rotateY(215deg) translateZ(320px); }
    .h { -webkit-transform: rotateY(260deg) translateZ(320px); }
    .i { -webkit-transform: rotateY(305deg) translateZ(320px); }
    .j { -webkit-transform: rotateY(360deg) translateZ(320px); }
    
		.circle-mask2 {
		-webkit-mask-image: url(mask.png);
		-webkit-mask-repeat: no-repeat;
		-webkit-mask-size: 100% 100%;
		-webkit-transform: matrix3d(0.64,0,0.64,0,0,0.83,0,0,-0.53,0,0.76,0,0,0,0,1);
		-webkit-transform-style: preserve-3d;
		-webkit-transition-duration: 0.5s;
		-webkit-transition-timing-function: cubic-bezier(0, 0, 0.58, 1);
			}
			
			.circle-mask {
				 mask: url("triangle#c1");
        -webkit-mask-box-image: url("triangle.svg");
      }


</style>

<script src="beatdetektor.js"></script>

<script>
	
window.util = window.url || {};

util.max = function(array) {
  var max = array[0];
  var len = array.length;
  for (var i = 0; i < len; ++i) {
    if (array[i] > max) {
      max = array[i];
    }
  }
  return max;
}

util.average = function(array) {
  var sum = 0;
  var len = array.length;
  for (var i = 0; i < len; ++i) {
    sum += array[i];
  }
  return sum / len;
}

function Sound() {
  const MIX_TO_MONO = false;
  const NUM_SAMPLES = 2048;

  var self_ = this;
  var context_ = new (window.AudioContext || window.webkitAudioContext)();
  var source_ = null;
  var jsProcessor_ = null;
  var analyser_ = null;
  var numZero_ = 0;

  this.playing = false;

  var processAudio_ = function(e) {

    // Get left/right input and output arrays
    var inputArrayL = e.inputBuffer.getChannelData(0);
    var inputArrayR = e.inputBuffer.getChannelData(1);

    // Set output data.
    e.outputBuffer.getChannelData(0).set(inputArrayL)
    e.outputBuffer.getChannelData(1).set(inputArrayR)

    // TODO(ericbidelman): Figure out if this is safe.
    // Don't do any of the remaining processing/computation if there's no input.
    if (inputArrayL[0] == 0 && inputArrayR[0] == 0) {
      numZero_++;

      if (numZero_ > 10) {  // silence, assume no input
        gradient.style.backgroundSize = '76% 41%, 55% 100%, 100% 100%';
        //canvas.classList.add('hidden');
        numZero_ = 0;
      }
      return;
    }

    var freqByteData = new Uint8Array(analyser_.frequencyBinCount);

    if (waveForm.checked) {
      analyser_.getByteTimeDomainData(freqByteData);
    } else {
      analyser_.getByteFrequencyData(freqByteData);
      //analyser_.fftSize = 2048;
    }

    var percent = Math.min((util.max(freqByteData) / 150) * 100, 105);
    //console.log(percent)
    gradient.style.backgroundSize = '76% 41%, 55% 100%, ' + percent + '%, ' + percent + '%';

    if (showCanvas.checked) {
      self_.renderFFT('canvas', freqByteData);
    }
  };

  this.renderFFT = function(format, freqByteData) {
    if (format == 'canvas') {
      const SPACER_WIDTH = 5;
      const BAR_WIDTH = 5;
      const numBars = Math.round(canvas.width / SPACER_WIDTH);

/*
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw rectangle for each frequency bin.
      var y = (canvas.height / 2) + 3;
      for (var i = 0; i < numBars; ++i) {
        var magnitude = freqByteData[i];
        var height = magnitude / (canvas.height / 50);
        ctx.fillRect(i * SPACER_WIDTH, y, BAR_WIDTH, -height);
        ctx.fillRect(i * SPACER_WIDTH, y, BAR_WIDTH, height);
      }
 */    
      
    }
  };

  this.initAudio = function(arrayBuffer) {
    if (source_) {
      runCmd('stop');
    }

    source_ = context_.createBufferSource();
    source_.looping = false;

    // Use async decoder if it is available.
    if (context_.decodeAudioData) {
      context_.decodeAudioData(arrayBuffer, function(buffer) {
        source_.buffer = buffer;
      }, function(e) {
        console.log(e);
      });
    } else {
      source_.buffer = context_.createBuffer(arrayBuffer, MIX_TO_MONO /*mixToMono*/);
    }

    // This AudioNode will do the amplitude modulation effect directly in JavaScript
    jsProcessor_ = context_.createJavaScriptNode(NUM_SAMPLES /*bufferSize*/, 1 /*num inputs*/, 1 /*num outputs*/);
    jsProcessor_.onaudioprocess = processAudio_;

    analyser_ = context_.createAnalyser();

    /*var gainNode = context_.createGainNode();
    gainNode.gain.value = 10;
    source_.connect(gainNode);
    gainNode.connect(jsProcessor_)
    */

    // Connect the processing graph: source -> jsProcessor -> analyser -> destination
    source_.connect(analyser_);

    analyser_.connect(jsProcessor_);
    jsProcessor_.connect(context_.destination);
    
    //source_.connect(context_.destination);

    //runCmd('play');
  };

  this.load = function(url) {
    var request = new XMLHttpRequest();
    request.open('GET', url, true);
    request.responseType = 'arraybuffer';
    request.onload = function(e) {
      document.querySelector("[data-func='play']").disabled = false;
      self_.initAudio(request.response);
    };
    request.send();
  };

  this.play = function() {
    //var convolver = context_.createConvolver();
    //source_.connect(convolver);
    source_.noteOn(0);

    this.playing = true;
  };

  this.stop = function() {
    source_.noteOff(0);

    this.playing = false;
  };
}

function runCmd(el) {
  if (typeof el == 'string') {
    var func = el;
  } else {
    var func = el.dataset.func.toLowerCase();
  }
  sound[func]();
  el.disabled = !el.disabled;
  switch (func) {
    case 'play':
      document.querySelector("[data-func='stop']").disabled = false;
      break;
    case 'stop':
      document.querySelector("[data-func='play']").disabled = false;
      break;
    default:
      // noop
  }
}

var waveForm = document.getElementById('waveform');
//var canvas = document.getElementById('fft');
var showCanvas = document.getElementById('show-canvas');
var gradient = document.querySelector('#hal .inner .inner');
//var ctx = canvas.getContext('2d');
//ctx.fillStyle = 'rgba(0,0,0,0.1)'; //rgba(68,0,3,0.2)

var sound = new Sound();

(function init() {
  sound.load('IO-5.0.ogg');

  showCanvas.addEventListener('change', function(e) {
    //canvas.classList.toggle('hidden');
    
  }, false);
})();
</script>

<body>

<details open="open">
  <summary>Options</summary>
  <div>
    <span>smoothing:</span><input type="range" min="0" max="0.95" step="0.05" value="0.0" id="smoothing"><br>
    <span>time domain?:</span><input type="checkbox" id="waveform" checked><br>
    <span>show canvas?:</span><input type="checkbox" id="show-canvas" checked>
  </div>
  <button onclick="runCmd(this)" data-func="play" disabled>play</button> 
  <button onclick="runCmd(this)" data-func="stop" disabled>stop</button>
</details>


  <div class="container">
    <img class="a quimby_search_image" src="./Spinning HTML5Logo_files/HTML5_Logo_512.png">
    <img class="b quimby_search_image" src="./Spinning HTML5Logo_files/HTML5_3D_Effects_512.png">
    <img class="c quimby_search_image" src="./Spinning HTML5Logo_files/HTML5_Connectivity_512.png">
    <img class="d quimby_search_image" src="./Spinning HTML5Logo_files/HTML5_Device_Access_512.png">
    <img class="e quimby_search_image" src="./Spinning HTML5Logo_files/HTML5_Multimedia_512.png">
    <img class="f quimby_search_image" src="./Spinning HTML5Logo_files/HTML5_Offline_Storage_512.png">
    <img class="g quimby_search_image" src="./Spinning HTML5Logo_files/HTML5_Performance_512.png">
    <!--img class="h quimby_search_image" src="./Spinning HTML5Logo_files/HTML5_Semantics_512.png" -->
    <div class="h quimby_search_image circle-mask">
			<video autoplay="true" loop="true" class="circle-mask">
			Your browser does not support the <code>video</code> element.
					<source src="http://craftymind.com/factory/html5video/BigBuckBunny_640x360.mp4" type="video/mp4"/>
					<source src="http://craftymind.com/factory/html5video/BigBuckBunny_640x360.ogv" type="video/ogg"/>
			</video>
    </div>

    <!--img class="i quimby_search_image" src="./Spinning HTML5Logo_files/HTML5_Styling_512.png"-->
    <div class="i quimby_search_image circle-mask">
			<video autoplay="true" loop="true" class="circle-mask">
			Your browser does not support the <code>video</code> element.
					<source src="http://craftymind.com/factory/html5video/BigBuckBunny_640x360.mp4" type="video/mp4"/>
					<source src="http://craftymind.com/factory/html5video/BigBuckBunny_640x360.ogv" type="video/ogg"/>
			</video>
    </div>
    
  </div>
  
  safari 5 or chrome 9 on a mac
  

</body></html>